# coder:也
# 开发时间:2022/10/5 21:09

# Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，
# 使用键-值（key-value）存储，具有极快的查找速度。
d = {'wang': 96, 'dfg': 87}
print(d['wang'])
d['dfg'] = 66
print(d['dfg'])
print(d)    # {'wang': 96, 'dfg': 66}

# 要避免key不存在的错误，有两种办法，一是通过in判断key是否存在
print('dfgh' in d)
print(d.get('wang'))
print(d.get('wang1', 6))

# 要删除一个key，用pop(key)方法，对应的value也会从dict中删除
d.pop('dfg')
print(d)    # {'wang': 96}

# dict内部存放的顺序和key放入的顺序是没有关系的
'''
和list比较，dict有以下几个特点：

查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。
而list相反：

查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。
'''
# 需要牢记的第一条就是dict的key必须是不可变对象
# 在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。
# 而list是可变的，就不能作为key

# set和dict类似，也是一组key的集合，但不存储value
# 由于key不能重复，所以，在set中，没有重复的key
# 要创建一个set，需要提供一个list作为输入集合
s = set([1, 2, 3])
print(s)
# 重复元素在set中自动被过滤
s = set([11,5,5,4,7,7,8,8,4,1,3,2,5,6])
print(s)    # {1, 2, 3, 4, 5, 6, 7, 8, 11}
# 通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
s = set([1,2,5,7,5,4,7])
s.add(44)
print(s)    # {1, 2, 4, 5, 7, 44}
# 通过remove(key)方法可以删除元素
s.remove(4)
print(s)    # {1, 2, 5, 7, 44}
# set可以看成数学意义上的无序和无重复元素的集合，
# 因此，两个set可以做数学意义上的交集、并集等操作
s1 = set([1,2,3])
s2 = set([2,3,4])
print(s1 & s2)  # {2, 3}
print(s1 | s2)  # {1, 2, 3, 4}
# set和dict的唯一区别仅在于没有存储对应的value，
# 但是，set的原理和dict一样，所以，同样不可以放入可变对象
# 因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。

'''
再议不可变对象
上面我们讲了，str是不变对象，而list是可变对象。
对于可变对象，比如list，对list进行操作，list内部的内容是会变化的
'''
a = ['c', 'a', 'b']
a.sort()
print(a)    # ['a', 'b', 'c']
# 而对于不可变对象，比如str，对str进行操作呢
a = 'abc'
a.replace('a','A')
print(a)    # abc    为什么呢？？？？？？？
'''
要始终牢记的是，a是变量，而'abc'才是字符串对象！
有些时候，我们经常说，对象a的内容是'abc'，但其实是指，
a本身是一个变量，它指向的对象的内容才是'abc'：
'''
'''
当我们调用a.replace('a', 'A')时，
实际上调用方法replace是作用在字符串对象'abc'上的，
而这个方法虽然名字叫replace，但却没有改变字符串'abc'的内容。
相反，replace方法创建了一个新字符串'Abc'并返回，
如果我们用变量b指向该新字符串，就容易理解了，变量a仍指向原有的字符串'abc'，
但变量b却指向新字符串'Abc'了
'''
'''
所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。
相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。
'''




























































